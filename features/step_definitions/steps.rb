require 'cucumber'
require 'page-object'
require 'rspec'
require 'date'

include PageObject::PageFactory

Given(/^I visit the blog for my favorite blogger$/) do
  visit_page ArticleListPage
end

When(/^I choose a blog post$/) do
  on_page ArticleListPage do |page|
    page.firstArticle
  end
end

Then(/^I should see comments left by other readers$/) do
  on_page ArticlePage do |page|
    expect(page.text).to match "I'm not sure I understand this."
  end
end

Given(/^I am reading a blog post from my favorite blogger$/) do
  visit_page ArticlePage do |page|
    page.login
  end
  on_page LoginPage do |page|
    page.username='andy'
    page.password='password'
    page.submit
  end
end

When(/^I add my genius comment to the blog post$/) do
  on_page ArticlePage do |page|
    @generatedCommentText="This comment generated at #{DateTime.now().rfc2822}";
    page.commentEntry=@generatedCommentText
    page.submitComment
  end
end

Then(/^my genius comment is at the top of the blog post comments$/) do
  on_page ArticlePage do |page|
    page.wait_until(10,"Stalled at AJAX comment submission") do
      page.text.include? @generatedCommentText
    end
    expect(page.topmostComment).to eq(@generatedCommentText)
  end
end

Given(/^I am logged in as a blogger$/) do
  visit_page LoginPage do |page|
    page.username='andy'
    page.password='password'
    page.submit
  end
end

When(/^I publish a new blog post$/) do
  visit_page ArticleListPage do | page|
    page.newArticle
  end
  on_page NewArticlePage do |page|
    @generatedArticleTitle="Generated article at #{DateTime.now().rfc2822}";
    @generatedArticleContent='This is the content of an article generated by acceptance test.';
    page.title=@generatedArticleTitle;
    page.content=@generatedArticleContent;
    page.submit
  end
end

Then(/^I am notified that the blog post was successfully added$/) do
  #TODO
end

Then(/^the newly added blog post is at the top of the recent posts list$/) do
  on_page ArticleListPage do |page|
    expect(page.topArticleTitle).to eq(@generatedArticleTitle)
    expect(page.topArticleDateAndAuthor).to match("by Andy")
  end
end

Given(/^my favorite blogger has been very active$/) do
  visit_page ArticleListPage do |page|
  end
end

Then(/^then I should see a summary of my favorite blogger's (\d+) most recent posts in reverse order$/) do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then(/^I should see the blog post$/) do
  pending # express the regexp above with the code you wish you had
end

When(/^I search for a blog post$/) do
  pending # express the regexp above with the code you wish you had
end

Then(/^I should see posts with that value in the title$/) do
  pending # express the regexp above with the code you wish you had
end

Then(/^the url should contain information about the post$/) do
  pending # express the regexp above with the code you wish you had
end

